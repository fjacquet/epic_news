import json
import sys
from pathlib import Path

from epic_news.models.rss_models import RssFeeds
from epic_news.models.rss_weekly_models import ArticleSummary, FeedDigest, RssWeeklyReport
from epic_news.utils.directory_utils import ensure_output_directory
from epic_news.utils.html.rss_weekly_html_factory import rss_weekly_to_html

# Add the project root to the Python path to allow for absolute imports
project_root = Path(__file__).resolve().parents[3]
sys.path.append(str(project_root))


def main():
    """
    Reads processed RSS data from a JSON file, converts it to an HTML report,
    and saves the report.
    """
    print("üöÄ Starting RSS HTML generation debugger...")

    # Define paths
    content_json_path = project_root / "content.json"
    output_html_path = project_root / "output" / "rss_weekly" / "debug_report.html"

    # Ensure output directory exists
    output_dir = output_html_path.parent
    ensure_output_directory(str(output_dir))

    # Check if content.json exists
    if not content_json_path.exists():
        print(f"‚ùå Error: Input file not found at {content_json_path}")
        print("Please run the 'unified_rss_tool.py' script first to generate it.")
        return

    print(f"üìÑ Loading data from: {content_json_path}")

    # Load and parse the JSON data
    try:
        with open(content_json_path, encoding="utf-8") as f:
            data = json.load(f)

        rss_feeds_model = RssFeeds.model_validate(data)
        print("‚úÖ Data loaded and validated successfully.")

        # Transform RssFeeds to RssWeeklyReport
        print("üîÑ Transforming data to RssWeeklyReport model...")
        report_feeds = []
        total_articles = 0
        for feed_data in rss_feeds_model.rss_feeds:
            articles = [
                ArticleSummary(
                    title=a.title,
                    link=a.link,
                    published=a.published if a.published else "",
                    summary=a.content or "",
                    source_feed=feed_data.feed_url,
                )
                for a in feed_data.articles
            ]
            report_feeds.append(
                FeedDigest(
                    feed_url=feed_data.feed_url,
                    feed_name="",  # The source model has no title, the factory will generate one from the URL
                    articles=articles,
                    total_articles=len(articles),
                )
            )
            total_articles += len(articles)

        report_model = RssWeeklyReport(
            title="Debug RSS Weekly Report",
            summary="This is a test summary generated by the debug script.",
            feeds=report_feeds,
            total_feeds=len(report_feeds),
            total_articles=total_articles,
        )
        print("‚úÖ Transformation complete.")

    except Exception as e:
        print(f"‚ùå Error parsing or validating JSON file: {e}")
        return

    # Generate the HTML report
    print("üé® Generating HTML report...")
    try:
        rss_weekly_to_html(report_model, html_file=str(output_html_path))
        print(f"‚úÖ HTML report successfully generated at: {output_html_path}")
    except Exception as e:
        print(f"‚ùå Error during HTML generation: {e}")


if __name__ == "__main__":
    main()
