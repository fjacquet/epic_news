---
menu_planning_task:
  description: >
    Planifier UNIQUEMENT la structure du menu hebdomadaire français complet.
    OBJECTIF: Créer un plan de menu hebdomadaire cohérent et équilibré comprenant
     30 recettes harmonieusement associées.
    STRUCTURE OBLIGATOIRE:
    - 7 jours × 2 repas = 14 repas
    - Chaque repas: entrée + plat principal   - Weekend déjeuners: entrée + plat principal + dessert
    - TOTAL: 30 recettes spécifiées individuellement
    RÉPARTITION EXACTE:
    - Lundi-Vendredi: Déjeuner (entrée + plat), Dîner (entrée + plat) 
    - Samedi-Dimanche: Déjeuner (entrée + plat + dessert), Dîner (entrée + plat)
    Contraintes à respecter:
    - Saison: {season} - utiliser les produits de saison correspondant à la date {current_date}
    - Cuisine française familiale traditionnelle
    - Adaptation aux contraintes spécifiques: {constraints}
    - Respect des préférences culinaires: {preferences}
    - Prise en compte du contexte familial: {user_context}
    CRITÈRES DE COHÉRENCE GLOBALE:
    - Harmonie gustative: les plats d'un même repas doivent se compléter (saveurs, textures, intensités)
    - Progression culinaire: entrée légère → plat principal plus consistant → dessert équilibré
    - Variété sur la semaine: alterner les types de protéines, de féculents et de légumes
    - Équilibre nutritionnel: répartition optimale des groupes alimentaires sur la semaine
    - Rythme hebdomadaire: plats plus légers en semaine, plus élaborés le weekend
    - Chaque recette doit être UNIQUE et clairement spécifiée
    - Noms de recettes précis et attractifs
    IMPORTANT: Ne PAS générer les recettes détaillées - seulement la structure du
    menu avec les noms et descriptions des plats et leur information nutritionnelle.
    Les recettes seront générées séparément.
  expected_output: >
    Un plan de menu hebdomadaire complet qui respecte SCRUPULEUSEMENT la structure
    du modèle Pydantic `WeeklyMenuPlan`.
    
    STRUCTURE JSON OBLIGATOIRE - EXEMPLE COMPLET:
    {
      "week_start_date": "2025-01-27",
      "season": "hiver",
      "daily_menus": [
        {
          "day": "Lundi",
          "date": "2025-01-27",
          "lunch": {
            "meal_type": "déjeuner",
            "starter": {
              "name": "Salade de betteraves aux noix",
              "dish_type": "entrée",
              "description": "Salade fraîche de betteraves cuites, noix et vinaigrette à l'huile de noix",
              "seasonal_ingredients": ["betteraves", "noix", "mâche"],
              "nutritional_highlights": "Riche en fibres et antioxydants"
            },
            "main_course": {
              "name": "Pot-au-feu traditionnel",
              "dish_type": "plat principal",
              "description": "Bœuf mijoté avec légumes d'hiver, bouillon parfumé",
              "seasonal_ingredients": ["bœuf", "carottes", "poireaux", "navets"],
              "nutritional_highlights": "Source de protéines et légumes de saison"
            }
          },
          "dinner": {
            "meal_type": "dîner",
            "starter": {
              "name": "Velouté de potiron",
              "dish_type": "entrée",
              "description": "Soupe onctueuse de potiron avec crème fraîche",
              "seasonal_ingredients": ["potiron", "oignon", "crème fraîche"],
              "nutritional_highlights": "Riche en bêta-carotène"
            },
            "main_course": {
              "name": "Saumon grillé aux épinards",
              "dish_type": "plat principal",
              "description": "Filet de saumon grillé, épinards sautés à l'ail",
              "seasonal_ingredients": ["saumon", "épinards", "ail"],
              "nutritional_highlights": "Oméga-3 et fer"
            }
          }
        }
      ],
      "nutritional_balance": "Menu équilibré avec alternance protéines animales/végétales",
      "gustative_coherence": "Harmonie des saveurs avec progression des intensités",
      "constraints_adaptation": "Adaptation aux contraintes spécifiées",
      "preferences_integration": "Intégration des préférences culinaires"
    }
    
    RÈGLES CRITIQUES:
    - dish_type DOIT être exactement: 'entrée', 'plat principal', ou 'dessert'
    - seasonal_ingredients DOIT être un array de strings, jamais null
    - nutritional_highlights DOIT être une string non-vide, jamais null
    - Tous les champs sont OBLIGATOIRES sauf dessert (weekend uniquement)
    - daily_menus DOIT contenir exactement 7 objets DailyMenu
    - Chaque DailyMenu DOIT avoir lunch ET dinner
    
    RETOURNEZ UNIQUEMENT LE JSON VALIDE, AUCUN AUTRE TEXTE.
  agent: menu_researcher
menu_json_task:
  description: >
    Transformer les données du menu hebdomadaire en un format JSON structuré et propre.
    OBJECTIF: Prendre les informations de menu collectées et les structurer en un
    format JSON conforme au modèle de données requis, sans aucun élément HTML ou formatage visuel.
    
    VALIDATION OBLIGATOIRE:
    - Vérifier que dish_type est exactement 'entrée', 'plat principal', ou 'dessert'
    - S'assurer que seasonal_ingredients est toujours un array, jamais null
    - Garantir que nutritional_highlights est une string non-vide
    - Valider que tous les champs obligatoires sont présents
    - Contrôler que daily_menus contient exactement 7 éléments
    
    INSTRUCTIONS TECHNIQUES:
    - Assurer que toutes les données sont correctement structurées selon le modèle WeeklyMenuPlan
    - Vérifier l'intégrité et la cohérence des données
    - Éliminer tout élément de formatage ou balise HTML
    CONTENU REQUIS:
    - Organisation par jour de la semaine (Lundi à Dimanche)
    - Distinction claire entre déjeuners et dîners
    - Tous les plats avec leur type (entrée, plat principal, dessert)
    - Ingrédients de saison pour chaque plat
    - Informations nutritionnelles pour chaque plat
    STRUCTURE DE SORTIE:
    - JSON valide et bien formaté
    - Conforme au schéma WeeklyMenuPlan
    - Facilement parsable par d'autres systèmes
    Utiliser les informations de la structure du menu précédemment collectées pour générer un document JSON propre et structuré.
  expected_output: >
    Un objet JSON parfaitement structuré et valide correspondant au modèle WeeklyMenuPlan.
    
    STRUCTURE OBLIGATOIRE - CHAQUE JOUR DOIT AVOIR CETTE STRUCTURE EXACTE:
    {
      "title": "Menu de la semaine",
      "week_start_date": "2024-01-15",
      "nutritional_balance": "Équilibré en protéines, glucides et lipides",
      "gustative_coherence": "Saveurs méditerranéennes harmonieuses",
      "constraints_adaptation": "Adapté aux contraintes spécifiées",
      "preferences_integration": "Intègre les préférences culinaires",
      "daily_menus": [
        {
          "day": "Lundi",
          "date": "2024-01-15",
          "lunch": {
            "dishes": [
              {
                "name": "Salade de quinoa",
                "dish_type": "entrée",
                "seasonal_ingredients": ["quinoa", "légumes d'hiver"],
                "nutritional_highlights": "Riche en protéines végétales"
              }
            ]
          },
          "dinner": {
            "dishes": [
              {
                "name": "Saumon grillé",
                "dish_type": "plat principal",
                "seasonal_ingredients": ["saumon", "légumes verts"],
                "nutritional_highlights": "Riche en oméga-3"
              }
            ]
          }
        }
      ]
    }
    
    VALIDATION FINALE REQUISE:
    - JSON syntaxiquement correct
    - Tous les champs obligatoires présents (title, week_start_date, nutritional_balance, gustative_coherence, constraints_adaptation, preferences_integration, daily_menus)
    - Chaque daily_menu DOIT avoir: day, date, lunch, dinner
    - Chaque lunch/dinner DOIT avoir un array dishes
    - Chaque dish DOIT avoir: name, dish_type, seasonal_ingredients, nutritional_highlights
    - dish_type DOIT être exactement: "entrée", "plat principal", ou "dessert"
    - seasonal_ingredients DOIT être un array, jamais null
    - nutritional_highlights DOIT être une string non-vide
    - Types de données conformes (strings, arrays, objets)
    - Aucune valeur null dans les champs requis
    
    Le JSON doit être propre, sans formatage HTML, et prêt à être utilisé directement
    par l'application.
    Format de sortie: JSON pur uniquement, sans texte explicatif.
  agent: menu_reporter
  output_file: "{output_file}"